apiVersion: v1
kind: Template
labels:
  template: bluegreen-pipeline
metadata:
  annotations:
    description: This example showcases a blue green deployment using a Jenkins
      pipeline that pauses for approval.
    iconClass: icon-jenkins
    tags: instant-app,jenkins
  name: bluegreen-pipeline
objects:  
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        pipeline.alpha.openshift.io/uses: '[{"name": "${NAME}", "namespace": "", "kind": "DeploymentConfig"}]'
      creationTimestamp: null
      labels:
        name: bluegreen-pipeline
      name: bluegreen-pipeline
    spec:
      strategy:
        jenkinsPipelineStrategy:
          jenkinsfile: |-
            try {
               timeout(time: 20, unit: 'MINUTES') {
                  def appName="${NAME}"
                  def project=""
                  def tag="blue"
                  def altTag="green"
                  def verbose="${VERBOSE}"
          
                  node {
                    project = env.PROJECT_NAME
                    stage("Initialize") {
                      sh "oc get route ${appName} -n ${project} -o jsonpath='{ .spec.to.name }' --loglevel=4 > activeservice"
                      activeService = readFile('activeservice').trim()
                      if (activeService == "${appName}-blue") {
                        tag = "green"
                        altTag = "blue"
                      }
                      sh "oc get route ${tag}-${appName} -n ${project} -o jsonpath='{ .spec.host }' --loglevel=4 > routehost"
                      routeHost = readFile('routehost').trim()
                    }
          
                    stage("Build") {
                      echo "building tag ${tag}"
                      openshiftBuild buildConfig: appName, showBuildLogs: "true", verbose: verbose
                    }
          
                    stage("Deploy Test") {
                      openshiftTag srcStream: appName, srcTag: 'latest', destinationStream: appName, destinationTag: tag, verbose: verbose
                      openshiftVerifyDeployment deploymentConfig: "${appName}-${tag}", verbose: verbose
                    }
          
                    stage("Test") {
                      input message: "Test deployment: http://${routeHost}. Approve?", id: "approval"
                    }
          
                    stage("Go Live") {
                      sh "oc set -n ${project} route-backends ${appName} ${appName}-${tag}=100 ${appName}-${altTag}=0 --loglevel=4"
                    }
                  }
               }
            } catch (err) {
               echo "in catch block"
               echo "Caught: ${err}"
               currentBuild.result = 'FAILURE'
               throw err
            }          
        type: JenkinsPipeline
      triggers:
      - github:
          secret: "${GITHUB_WEBHOOK_SECRET}"
        type: GitHub
      - generic:
          secret: "${GENERIC_WEBHOOK_SECRET}"
        type: Generic
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        description: Defines how to build the application
      name: ${NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          from:
            kind: ImageStreamTag
            name: php:5.6
            namespace: ${NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
  - apiVersion: v1
    kind: Route
    metadata:
      name: blue-${NAME}
    spec:
      to:
        kind: Service
        name: ${NAME}-blue
  - apiVersion: v1
    kind: Route
    metadata:
      name: green-${NAME}
    spec:
      to:
        kind: Service
        name: ${NAME}-green
  - apiVersion: v1
    kind: Route
    metadata:
      name: ${NAME}
    spec:
      alternateBackends:
      - name: ${NAME}-green
        weight: "0"
      to:
        kind: Service
        name: ${NAME}-blue
        weight: "100"
  - apiVersion: v1
    kind: ImageStream
    metadata:
      annotations:
        description: Keeps track of changes in the application image
      name: ${NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}", "namespace": "", "kind": "Service"}]'
      name: ${NAME}-blue
    spec:
      ports:
      - name: web
        port: 8080
        targetPort: 8080
      selector:
        name: ${NAME}-blue
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}", "namespace": "", "kind": "Service"}]'
      name: ${NAME}-green
    spec:
      ports:
      - name: web
        port: 8080
        targetPort: 8080
      selector:
        name: ${NAME}-green
  
  
  
  
  
  
  
  
  
  
  
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewApp
      creationTimestamp: null
      name: ${NAME}-blue
    spec:
      replicas: 1
      selector:
        name: ${NAME}-blue
      strategy:
        type: Rolling
      template:
        metadata:
          annotations:
            openshift.io/generated-by: OpenShiftNewApp
          creationTimestamp: null
          labels:
            name: ${NAME}-blue
        spec:
          containers:
          - image: ' '
            name: bluegreen
            ports:
            - containerPort: 8080
              protocol: TCP
            resources: {}
      test: false
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - bluegreen
          from:
            kind: ImageStreamTag
            name: ${NAME}:blue
        type: ImageChange
    status:
      availableReplicas: 0
      latestVersion: 0
      observedGeneration: 0
      replicas: 0
      unavailableReplicas: 0
      updatedReplicas: 0
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewApp
      creationTimestamp: null
      name: ${NAME}-green
    spec:
      replicas: 1
      selector:
        name: ${NAME}-green
      strategy:
        type: Rolling
      template:
        metadata:
          annotations:
            openshift.io/generated-by: OpenShiftNewApp
          creationTimestamp: null
          labels:
            name: ${NAME}-green
        spec:
          containers:
          - image: ' '
            name: bluegreen
            ports:
            - containerPort: 8080
              protocol: TCP
            resources: {}
      test: false
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - bluegreen
          from:
            kind: ImageStreamTag
            name: ${NAME}:green
        type: ImageChange
    status:
      availableReplicas: 0
      latestVersion: 0
      observedGeneration: 0
      replicas: 0
      unavailableReplicas: 0
      updatedReplicas: 0
parameters:
- description: The name assigned to all of the frontend objects defined in this template.
  displayName: Name
  name: NAME
  required: true
  value: bgejemplo
- description: The exposed hostname that will route to the Node.js service, if left
    blank a value will be defaulted.
  displayName: Application Hostname
  name: APPLICATION_DOMAIN
- description: The URL of the repository with your application source code.
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  required: true
  value: https://github.com/npersia/bluegreen.git
- description: The reference of the repository with your application source code.
  displayName: Git Repository Ref
  name: SOURCE_REPOSITORY_REF
  required: true
  value: master
- displayName: Database Name
  name: DATABASE_NAME
  required: true
  value: sampledb
- description: Username for MongoDB user that will be used for accessing the database.
  displayName: MongoDB Username
  from: user[A-Z0-9]{3}
  generate: expression
  name: DATABASE_USER
- description: Password for the MongoDB user.
  displayName: MongoDB Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DATABASE_PASSWORD
- description: Maximum amount of memory the Node.js container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: Maximum amount of memory the MongoDB container can use.
  displayName: Memory Limit (MongoDB)
  name: MEMORY_MONGODB_LIMIT
  required: true
  value: 512Mi
- displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: mongodb
- description: Password for the database admin user.
  displayName: Database Administrator Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DATABASE_ADMIN_PASSWORD
- description: Set this to the relative path to your project if it is not in the root
    of your repository.
  displayName: Context Directory
  name: CONTEXT_DIR
- description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
  displayName: GitHub Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
- description: A secret string used to configure the Generic webhook.
  displayName: Generic Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GENERIC_WEBHOOK_SECRET
- description: The custom NPM mirror URL
  displayName: Custom NPM Mirror URL
  name: NPM_MIRROR
- description: The OpenShift Namespace where the NodeJS and MongoDB ImageStreams reside.
  displayName: Namespace
  name: NAMESPACE
  required: true
  value: openshift
- description: Whether to enable verbose logging of Jenkinsfile steps in pipeline
  displayName: Verbose
  name: VERBOSE
  required: true
  value: "false"
